# Include routes helpers
<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

all_items = JSON.parse('<%= raw Item.order(:name).to_json %>')

items_by_category = JSON.parse(
  '<%= raw Category.order(:name).map { |category|
    [category.id, category.items.order(:name)]
  }.to_h.to_json %>'
)

@init_smooth_scrolling = ->
  # Smooth Scroll on clicking nav items
  $('#bin_links a').click ->
    $href = $(this).attr('href')
    $('body').stop().animate { scrollTop: $($href).offset().top }, 1000
    false
  # back to top
  $('#toTop a').click ->
    $('body').animate { scrollTop: 0 }, 1000
    false
  # Parallaxing + add class active on scroll
  $(document).scroll ->
    # parallaxing
    $movebg = $(window).scrollTop() * -0.3
    $('.portion').css 'background-positionY', $movebg + 'px'
    # add class active to nav a on scroll
    scrollPos = $(document).scrollTop() + 100
    $('#bin_links a').each ->
      currLink = $(this)
      refElement = $(currLink.attr('href'))
      if refElement.position().top <= scrollPos and refElement.position().top + refElement.height() > scrollPos
        $('#bin_links a').removeClass 'active'
        currLink.addClass 'active'
      return
    # changing padding of nav a on scroll
    if scrollPos > 250
      $('#bin_links a').addClass 'small'
      $('#bin_links img').addClass 'move'
      $('#bin_links span').removeClass 'movetext'
    else
      $('#bin_links a').removeClass 'small'
      $('#bin_links img').removeClass 'move'
      $('#bin_links span').addClass 'movetext'
    return

###
Display only items belonging to the given category in the items picker.
If !force, then this founction is a noop if the given category is already displayed. Force can be
specified as a means of refreshing the items picker after an update.
###
@filter_by_category = (category_id, {force} = {}) ->
  force ?= false

  btn = $('#category' + category_id)
  if is_active(btn) and not force
    # We're already filtering by this category
    return
  clear_items()
  append_items_by_category category_id
  activate btn
  return


###
Display all items from all categories in the items picker.
###
@display_all_items = ->
  btn = $('#all_categories')
  if is_active btn
    # We're already displaying all items
    return
  clear_items()
  append_items all_items()
  activate btn
  return

###
Set or unset (based on value of select) active class on all the Items within a category
###
@select_all = (select) ->
  $('#items').children('li').each ->
    if is_active($(this)) != select
      toggle_active $(this)

###
Add items to the appropriate bins
###
@add_to_bin = (bin) ->
  cat = active_category()
  items = all_items
  if cat
    items = items_by_category[cat]
  for item in items
    if is_active($("#item#{item.id}"))
      deactivate($("#item#{item.id}"))
      bin.items.push item
  refresh_bin bin

###
Remove selected items
###
@remove_items = (bin) ->
  bin.items = _.filter(bin.items, (item) -> !is_active($("#item_in_bin#{item.id}")))
  refresh_bin bin

###
Add a new item to the items picker based on the contents of #new-item-form
###
@save_new_item = ->
  item = form_to_json $('#new-item-form')

  if !item.name
    flash_error("Please enter a name for the item.", selector: '#new-item-errors')
    return
  if !item.category_id
    flash_error("Please choose a category for the item.", selector: '#new-item-errors')
    return

  # Tell the server to create the item
  get_json '<%= items_path %>', method: 'POST', data: { item: item }
    .on_success (res) ->
      # Close the dialog
      $('#new-item').modal('hide')

      # Add the new item to the items picker (maintaining sorted order) and filter by its category
      index = _.sortedIndex(items_by_category[item.category_id], item, 'name')
      items_by_category[item.category_id].splice index, 0, item
      filter_by_category(item.category_id, force: true)

      # Scroll to the new item
      first = $('#items li').first().position().top
      elem = $("#items li[name=\"#{item.name}\"]").position().top
      $('#items').scrollTop(elem - first)

      # And select it
      activate $("#items li[name=\"#{item.name}\"]")
    .on_error (err) ->
      flash_error(err, selector: '#new-item-errors')

###
Add a new bin to the city based on the contents of #new-bin-form
###
@save_new_bin = ({name, color}) -> promise (succeed, fail) ->
  bin = { name: name, color: color, city_id: $("#new-bin-form [name=\"city_input\"]").val() }

  if !bin.name
    flash_error('Please enter a name for the bin.')
    return fail()

  get_json '<%= bins_path %>', method: 'POST', data: { bin: bin }
    .on_success (res) ->
      # Add the new bin to our in-browser model
      res.bin.items ?= []
      bins.push res.bin
      # Clear the form
      $('#new-bin-form [name=name]').val('')

      create_bin res.bin
      create_bin_dropdown res.bin
      succeed()

    .on_error flash_error
    .on_errors ->
      fail()

###
Get the category_id by which we are currently filtering, or null if we are not.
###
@active_category = ->
  <% Category.all.each do |category| %>
    if is_active $("#category<%= category.id %>")
      return <%= category.id %>
  <% end %>
    else
      return null

###
Create DOM elements for each bin currently owned by the city
###
@init_bins = (bins) ->
  @bins = bins

  for bin in @bins
    create_bin bin
    create_bin_dropdown bin

  init_new_bin_form()
  refresh_new_bin_form()

  $last_bin = $("#bins").children().last()
  fit_to $last_bin.find('.heading'), $last_bin.find('input')
  fit_to $last_bin.find('.footer'), $last_bin.find('input')

@init_items = (items) ->
  @items = items
  display_all_items()

@click_new_bin = ->
  form = $("#new-bin-form")
  input = form.find('input')
  if input.val()
    form.submit()
  else
    input.focus()

@show_url = (city_id, url) ->
  $("#url").empty()

  edit_btn = $("<button type=\"button\" class=\"icon inline\">")
  edit_btn.append $("<span class=\"glyphicon glyphicon-pencil\">")
  edit_btn.click -> show_url_form city_id, url

  $("#url").append edit_btn, " ", $("<a href=\"#{url}\">#{remove_http url}</a>")

@show_url_form = (city_id, url = "") ->
  $("#url").empty()

  form = $("<form>")
  prompt = $("<div class=\"input-group\">").append $("<span class=\"input-group-addon\">http://</span>")
  input = $("<input type=\"text\" class=\"form-control\" value=\"#{remove_http url}\" placeholder=\"Add a link to your website\">")
  input.blur -> form.submit()
  prompt.append input
  form.append prompt

  form.submit (e) ->
    e.preventDefault()

    url = input.val()
    if url
      url = 'http://' + url

    get_json "/cities/#{city_id}", method: 'PATCH', data: { city: {website_url: url} }
      .on_error flash_error
      .on_success ->
        if url
          show_url city_id, url

  $("#url").append form
  input.focus()

###
Delete the specified bin from the database and the DOM.
###
delete_bin = (bin) ->
  get_json "/bins/#{bin.id}", method: 'DELETE'
    .on_success ->
      index = _.findIndex bins, (b) -> b.id == bin.id
      if index == -1
        console.log "Unable to remove bin #{bin.id} from GUI"
      else
        bins.splice index, 1
      $("#" + bin_id(bin)).remove()

    .on_error flash_error

###
Set the name and color of the bin with the given id.
###
patch_bin = (bin, {name, color}) -> promise (succeed, fail) ->
  # Save old data so we can rollback if the transaction fails
  [old_name, old_color] = [bin.name, bin.color]
  bin.name = name || old_name
  bin.color = color || old_color
  if name == old_name and color == old_color
    # Nothing to do, just close the form
    return succeed bin

  get_json "/bins/#{bin.id}", method: 'PATCH', data: { bin: bin }
    .on_success (res) ->
      succeed res.bin
    .on_error flash_error
    .on_errors (_, res) ->
      # Revert bin to whatever state it's in in the db right now (contained in the response)
      if res.bin
        i = _.findIndex bins, (bin) -> bin.id == res.bin.id
        bins[i] = res.bin
      else
        delete_bin bin
      fail()

init_new_bin_form = ->
  @next_color = {
    h: 120,
    s: 100,
    l: 50
  }

  $bin = $("#bins").children().last()
  $color_input = $bin.find '[name="color_input"]'
  $name_input = $bin.find '[name="name_input"]'

  $color_input
    .data 'color', '#000000' # This will be overridden when we refresh, but we need to set it or
                             # the colorpicker constructor will fail
    .colorpicker().on 'changeColor', (e) ->
      $color_input.css 'backgroundColor', e.color.toHex()
      $bin.children('.heading').css 'backgroundColor', e.color.toHex()

  $form = $bin.find('form')
  $form.submit (e) ->
    e.preventDefault()
    save_new_bin name: $name_input.val(), color: $color_input.data('colorpicker').color.toHex()
      .on_success ->
        next_color.h = next_color.h + 20 % 360
        $form.find('[name="name_input"]').val '' # Clear the form for next time
        refresh_new_bin_form()

refresh_new_bin_form = ->
  $bin = $("#bins").children().last()
  hsl = "hsl(#{next_color.h}, #{next_color.s}%, #{next_color.l}%)"
  $bin.find('.heading').css 'backgroundColor', hsl
  $bin.find('[name="color_input"]')
    .css 'backgroundColor', hsl
    .colorpicker 'setValue', hsl

###
Create a DOM structure representing a bin and append it to the list of bins.
###
create_bin = (bin) ->
  $bin = $("#bin_template").clone().detach()
  $bin.attr 'id', bin_id(bin)

  # Give each child with a name an id which is unique to this bin
  $bin.children().each ->
    if $(this).attr('name') != ''
      $(this).attr 'id', bin_id(bin, $(this).attr 'name')

  # Insert the new bin just before the last bin in the list (which will always be the new bin button)
  $bin.insertBefore $("#bins").children().last()

  init_bin bin
  refresh_bin bin

init_bin = (bin) ->
  $bin = $("#" + bin_id(bin))

  $heading = $bin.children('.heading')
  $form = $heading.find('[name="form"]').hide()
  $title = $heading.find('[name="title_bar"]')

  # Make the heading big enough to fit the form, even when the form is not displayed
  fit_to $heading, $form

  $color_input = $form.find('[name="color_input"]')
  $color_input
    .data 'color', bin.color
    .colorpicker().on 'changeColor', (e) ->
      $color_input.css 'backgroundColor', e.color.toHex()
      $heading.css 'backgroundColor', e.color.toHex()
      bin.target_color = e.color.toHex()

  $form.submit (e) ->
    e.preventDefault()
    patch_bin bin, name: $form.find('input').val(), color: bin.target_color
      .on_success ->
        $form.hide()
        $form.find('input').val '' # Reset the form for next time
        $title.show()
      .on_complete ->
        refresh_bin bin

  $bin.find('[name="edit"]').click ->
    $title.hide()
    $form.show()
    $(document.body).one 'click', (e) ->
      save_bin_on_focusout e, $form, $heading.add('.colorpicker').add($form).add($title)
    $heading.append $form
    $form.find('input').focus()

  $bin.find('[name="delete"]').click ->
    delete_bin bin

  $bin.find('[name="remove_items"]').click ->
    remove_items bin

refresh_bin = (bin) ->
  $bin = $("#" + bin_id(bin))

  $bin.find('[name="title"]').html bin.name
  $bin.find('[name="name_input"]').attr 'placeholder', bin.name

  $bin.find(".heading").css 'backgroundColor', bin.color
  $bin.find('[name="color_input"]').css 'backgroundColor', bin.color

  $items = $bin.find '[name="items"]'
  $items.empty()
  for item in bin.items
    btn = create_button(item)
    btn.attr('id', "item_in_bin#{item.id}")
    $items.append btn

create_bin_dropdown = (bin) ->
  $button = $("<button class=\"dropdown-item\">")
  $button.append bin.name
  $button.click -> add_to_bin(bin)
  $("#bin_dropdown").append $button

is_active = (elem) ->
  elem.hasClass 'active'

###
Remove all items from the items picker.
###
clear_items = ->
  $('#items').empty()

  # Unselect the category filter button
  $('#categories').children('li').each -> deactivate $(this)

###
Append all items from the given category to the items picker.
###
append_items_by_category = (category_id) ->
  append_items(items_by_category[category_id])

###
Add the given items to the items picker.
###
append_items = (items) ->
  items.forEach (item) ->
    btn = create_button(item)
    btn.attr('id', "item#{item.id}")
    $('#items').append btn

###
Helper function to create a button for each JS Item
###
create_button = (item) ->
  list_item = $('<li>')
  list_item.attr('name', item.name)
  list_item.addClass 'list-group-item btn btn-default'
  list_item.append item.name

  list_item.click ->
    toggle_active list_item

  list_item

activate = (elem) ->
  elem.addClass 'active'

deactivate = (elem) ->
  elem.removeClass 'active'

toggle_active = (elem) ->
  if is_active elem
    deactivate elem
  else
    activate elem

form_to_json = (form) ->
  data = {}
  $.each form.serializeArray(), (_, field) ->
    data[field.name] = field.value
  return data

###
Set the height of the first element to the outer height of the second.
###
fit_to = (parent, child) ->
  parent.height outer_height_of(child)

###
Get the height of an element which may or may not be in the DOM.
###
height_of = (elem) ->
  hypothetical_element elem, (e) -> e.height()

###
Get the height of an element (which may or may not be in the DOM) and its padding.
###
outer_height_of = (elem) ->
  hypothetical_element elem, (e) -> e.outerHeight()

###
Perform an operation on an element which may or may not be in the DOM, as if it were. For example,
this can be used to read what the height of an element is going to be before adding it to the DOM.
###
hypothetical_element = (elem, cont) ->
  if $.contains(document, elem)
    return cont elem
  else
    hyp = elem.clone()
    hyp.css 'visibility', 'hidden'

    # Add the (hidden) element to the DOM, do something, then remove it
    $(document.body).append hyp
    res = cont hyp
    hyp.remove()

    return res

all_items = ->
  _.sortBy (_.flatten Object.values(items_by_category), true), 'name'

remove_http = (url) -> url.replace /^http:\/\//, ""

save_bin_on_focusout = (e, $form, $outof) ->
  if $outof.has($(e.target)).size() == 0
    $form.submit()
  else
    $(document.body).one 'click', (e) -> save_bin_on_focusout e, $form, $outof

bin_id = (bin, name) ->
  if name
    "bin#{bin.id}_#{name}"
  else
    "bin_#{bin.id}"
