# This is a manifest file that'll be compiled into application.js, which will include all the files
# listed below.
#
# Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
# or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
#
# It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
# compiled file. JavaScript code in this file should be added after the last require_* statement.
#
# Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
# about supported directives.
#
#= require jquery
#= require jquery_ujs
#= require underscore
#= require turbolinks
#= require bootstrap-sprockets
#= require ckeditor/init
#= require ckeditor-autogrow
#= require_tree .

###
Display a notification to the user, as if it were rendered by the server with flash.
type: the type of notification. Can be "info", "success", "warning", or "danger". Default is "info".
dismissible: whether the notification can be closed by the user. Default is true.
selector: JQuery selector indicating the DOM element that should contain the message. Default is the
    global flash notification section of the application layout.
###
@flash = (msg, {type, dismissible, selector} = {}) ->
    type ?= 'notify'
    dismissible ?= true
    selector ?= '#flash'

    error = $('<div>')
    error.addClass "alert alert-#{type}"
    if dismissible
        error.addClass "alert-dismissible"
        error.append $('<button type="button" class="close" data-dismiss="alert">&times;</button>')
    error.append msg

    $(selector).append $(error)

@flash_error = (msg, {dismissible, selector} = {}) ->
    flash msg, type: 'danger', dismissible: dismissible, selector: selector

@flash_success = (msg, {dismissible, selector} = {}) ->
    flash msg, type: 'success', dismissible: dismissible, selector: selector

###
Get a JSON object from a REST API call. The endpoint specified by URL must support JSON requests
and return an object with a boolean property "ok", and, if !ok, must contain a property "errors"
which is a list of error messages. These are the conventions followed by our own API. The return
value of this function supports the callbacks described in JSONRequest.

method: specify the HTTP method to use. Default is "GET".
data: specify data to be sent in the request. Default is {}.
###
@get_json = (url, {method, data} = {}) -> new JSONRequest url, method: method, data: data

###
Object representing an outstanding REST API call and supporting success and error callbacks.
###
class JSONRequest
    constructor: (url, {method, data} = {}) ->
        method ?= 'GET'
        data ?= {}

        @xhr = $.ajax url, {
            method: method,
            dataType: 'json',
            data: data
        }

    ###
    If the request is successful, the response JSON will be passed to cb.
    ###
    on_success: (cb) ->
        @xhr.done (res) ->
            if res.ok
                cb res
        return this

    ###
    If the request is unsuccessful, either because of an HTTP error code or an API response
    indicating failure, cb will be called once for each error, and passed an error message each time.
    ###
    on_error: (cb) ->
        @on_errors (errs) ->
            for err in errs
                cb err
        return this

    ###
    If the request is unsuccessful, cb will be passed an array of error messages.
    ###
    on_errors: (cb) ->
        @xhr
        .done (res) ->
            if !res.ok
                cb res.errors
        .fail (req, status, message) ->
            cb ["#{status} (#{req.status}): #{message}"]
        return this
